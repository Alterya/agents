# Task ID: 20
# Title: Unified Logging, Error Handling & Observability
# Status: pending
# Dependencies: 15, 16, 17, 18, 19
# Priority: medium
# Description: Integrate Loguru for structured logs, add global exception handler and notification on failure.
# Details:
• Configure Loguru to rotate daily, level=INFO.
• Wrap each stage (collector, AI, notifier) in try/except; on fatal error send Slack DM to on-call via secondary Slack channel.
• Create metrics counters (success, failure, duration) with Prometheus client (optional, lightweight) for future scraping.
• Use backoff decorators for API interactions (max_tries=3).


# Test Strategy:
Simulate exception in collector; assert error logged and failure Slack message posted. Check log file rotation by forcing midnight rollover.

# Subtasks:
## 1. Configure Loguru for Unified Structured Logging [pending]
### Dependencies: None
### Description: Set up Loguru as the central logger with daily rotation and default level INFO for the entire service.
### Details:
Add Loguru to requirements, create logging config module that initializes Loguru sink rotating at midnight (retention=7 days, compression="zip"), set format to include timestamp, level, module, and json message field.

## 2. Implement Global Exception Handler with Loguru Integration [pending]
### Dependencies: 20.1
### Description: Install sys.excepthook override and asyncio exception handler to capture uncaught exceptions and log them via Loguru with stacktrace.
### Details:
Create exception_handler.py; on exception, call logger.exception and re-raise or terminate gracefully; integrate handler in app entrypoint.

## 3. Add Slack DM Notification on Fatal Errors [pending]
### Dependencies: 20.2
### Description: On fatal errors captured by the global handler, post a direct message to the on-call engineer in a secondary Slack channel.
### Details:
Use Slack Web API chat.postMessage with OAuth token from env; message includes service name, timestamp, and truncated traceback; retry with exponential backoff 3 attempts.

## 4. Integrate Prometheus Metrics Counters [pending]
### Dependencies: 20.1
### Description: Expose success, failure, and duration metrics for each stage (collector, AI, notifier) using the Prometheus client library.
### Details:
Create metrics.py initializing Counter(success_total, failure_total) and Histogram(duration_seconds); expose /metrics endpoint via multiprocess if needed.

## 5. Apply Backoff Decorators & Error-Aware Wrappers to All Stages [pending]
### Dependencies: 20.2, 20.4
### Description: Wrap API interactions for collector, AI, and notifier with backoff.on_exception(max_tries=3) and ensure try/except blocks record metrics and trigger Slack alerts on unrecoverable errors.
### Details:
Refactor stage functions to decorator style; increment metrics in success/failure paths; on final failure call global handler which logs and notifies Slack.

## 6. Cleanup and Code Organization [pending]
### Dependencies: 20.1, 20.2, 20.3, 20.4, 20.5
### Description: Remove temporary files, organize imports, and ensure clean code structure
### Details:


## 7. Quality Gate: Tests and Linting [pending]
### Dependencies: 20.6
### Description: Run comprehensive tests and linting checks to ensure code quality standards
### Details:


## 8. Context7 MCP Research: External Package Dependencies [pending]
### Dependencies: 20.7
### Description: Use Context7 MCP to research and validate external Python packages and dependencies
### Details:

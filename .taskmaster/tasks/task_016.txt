# Task ID: 16
# Title: Grafana MCP Alert Collector
# Status: pending
# Dependencies: 14
# Priority: high
# Description: Implement async data collector that fetches previous 24h alerts from Grafana MCP using httpx and returns normalised objects.
# Details:
• Endpoint: `/api/alertmanager/grafana/api/v2/alerts?since=<iso>` (example; confirm via mcp.json). Use bearer token header.
• Calculate `since = now - lookback_hours` in UTC; include timezone in query.
• Design dataclass Alert(
  id:str, service:str, severity:str, starts_at:dt, ends_at:Optional[dt], description:str, status:str)
• Handle pagination (Grafana returns link header) with async recursion.
• Retry w/ backoff on 5xx using backoff lib.


# Test Strategy:
Mock httpx.AsyncClient with respx: ensure pagination handled; verify that 24h lookback filter applied; error + retry path covered.

# Subtasks:
## 1. Grafana MCP API specification & configuration [pending]
### Dependencies: None
### Description: Research and verify the exact Grafana MCP Alertmanager endpoint, required query parameters, authentication method, and pagination link-header format. Capture example responses in fixtures and document environment variables (e.g., GRAFANA_MCP_TOKEN, GRAFANA_MCP_BASE_URL).
### Details:
Deliver a concise API reference (endpoint paths, required headers, pagination scheme, rate limits) and create a typed settings object (pydantic BaseSettings) that loads base URL and bearer token from the environment or .env file.

## 2. Alert dataclass design & parsing helpers [pending]
### Dependencies: 16.1
### Description: Define the Alert dataclass and utility functions that map raw Grafana alert JSON into normalised Alert objects, handling optional fields and timezone-aware datetime parsing.
### Details:
Implement Alert(id: str, service: str, severity: str, starts_at: datetime, ends_at: Optional[datetime], description: str, status: str). Provide from_grafana(payload: dict) -> Alert and list_from_response(resp_json: list) -> List[Alert]. Ensure all datetime values are converted to UTC and are tz-aware.

## 3. Async fetcher with lookback query construction [pending]
### Dependencies: 16.1
### Description: Implement an async function fetch_alert_page since=<iso> that builds the query using UTC now() - lookback_hours (default 24) and performs a single HTTP GET with httpx including bearer token header.
### Details:
Use httpx.AsyncClient with a 10 s timeout. Compute since_iso = (datetime.utcnow() - timedelta(hours=lookback)).isoformat(timespec='seconds') + 'Z'. Return httpx.Response for further processing.

## 4. Pagination, retry/backoff, and aggregation to Alert objects [pending]
### Dependencies: 16.2, 16.3
### Description: Compose the recursive collector that follows Link headers to fetch all pages, applies exponential backoff (backoff.on_exception) on 5xx, aggregates results, and returns List[Alert] using the parsing helpers.
### Details:
Implement async def collect_alerts(lookback_hours=24) -> List[Alert]. On each response, check response.headers['Link'] for rel="next"; call itself until exhausted. Wrap network calls with backoff expo (max_tries=5, jitter). Transform each page’s JSON via list_from_response and extend the result list.

## 5. Comprehensive unit & integration tests for collector [pending]
### Dependencies: 16.4
### Description: Create pytest-asyncio test suite covering happy path, pagination depth >1, lookback filtering, retry logic, and malformed responses.
### Details:
Use respx to simulate Grafana API, factory functions for dynamic payloads, and freezegun to freeze time for lookback validation. Include coverage targets in pyproject.toml.

## 6. Cleanup and Code Organization [pending]
### Dependencies: 16.1, 16.2, 16.3, 16.4, 16.5
### Description: Remove temporary files, organize imports, and ensure clean code structure
### Details:


## 7. Quality Gate: Tests and Linting [pending]
### Dependencies: 16.6
### Description: Run comprehensive tests and linting checks to ensure code quality standards
### Details:


## 8. Context7 MCP Research: External Package Dependencies [pending]
### Dependencies: 16.7
### Description: Use Context7 MCP to research and validate external Python packages and dependencies
### Details:

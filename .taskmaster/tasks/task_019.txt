# Task ID: 19
# Title: Slack Notifier
# Status: pending
# Dependencies: 18, 14
# Priority: high
# Description: Deliver summary to configured Slack channel with retries and thread support.
# Details:
• Use Slack Web API `chat.postMessage` via httpx; endpoint `https://slack.com/api/chat.postMessage`.
• Header `Authorization: Bearer xoxb-...`, `Content-Type: application/json`.
• Payload: {channel: SLACK_CHANNEL_ID, text: summary, mrkdwn: true}.
• If message > 4000 chars, split & post threaded replies using `thread_ts`.
• Retry on `rate_limited` error with exponential backoff.


# Test Strategy:
Use respx to mock Slack endpoints; verify auth header; large message splitting; 429 response triggers retry logic.

# Subtasks:
## 1. Slack API Configuration [pending]
### Dependencies: None
### Description: Provide secure configuration handling for Slack API credentials and channel ID.
### Details:
• Read `SLACK_BOT_TOKEN` and `SLACK_CHANNEL_ID` from environment variables or a secrets manager.
• Validate presence at application startup and raise descriptive error if missing.
• Expose a dataclass/config object that downstream functions can import.

## 2. Low-level Slack `chat.postMessage` Client [pending]
### Dependencies: 19.1
### Description: Implement a reusable async function to call Slack `chat.postMessage` via httpx.
### Details:
• Build request with header `Authorization: Bearer <token>` and `Content-Type: application/json`.
• Accept params: channel, text, thread_ts (optional), mrkdwn (default true).
• Return parsed JSON response and raise `SlackApiError` for non-ok replies (except 429 handled later).

## 3. Message Splitting & Threaded Posting [pending]
### Dependencies: 19.2
### Description: Create helper that splits summaries >4000 characters and posts threaded replies.
### Details:
• Determine Slack hard limit (4,000 chars).
• Slice text at word boundaries; first chunk is root message, subsequent chunks posted with `thread_ts` of root.
• Return array of message timestamps for possible auditing.

## 4. Exponential Backoff & Retry Logic [pending]
### Dependencies: 19.2, 19.3
### Description: Add automatic retries for `rate_limited` (HTTP 429) responses with exponential backoff.
### Details:
• Detect 429 status or Slack JSON error `rate_limited`.
• Implement backoff: start 1s, double each retry up to max 5 attempts.
• Respect `Retry-After` header if present.
• Make retry wrapper reusable around any Slack API call.

## 6. Cleanup and Code Organization [pending]
### Dependencies: 19.1, 19.2, 19.3, 19.4
### Description: Remove temporary files, organize imports, and ensure clean code structure
### Details:


## 8. Context7 MCP Research: External Package Dependencies [pending]
### Dependencies: None
### Description: Use Context7 MCP to research and validate external Python packages and dependencies
### Details:
